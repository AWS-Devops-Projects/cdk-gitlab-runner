"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../src/index");
const core_1 = require("@aws-cdk/core");
require("@aws-cdk/assert/jest");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
const aws_iam_1 = require("@aws-cdk/aws-iam");
test('Create the Runner', () => {
    const mockApp = new core_1.App();
    const stack = new core_1.Stack(mockApp, 'testing-stack');
    new index_1.GitlabContainerRunner(stack, 'testing', { gitlabtoken: 'GITLAB_TOKEN' });
    expect(stack).toHaveResource('AWS::EC2::Instance');
    expect(stack).toHaveResource('AWS::IAM::Role');
    expect(stack).toHaveResource('AWS::EC2::SecurityGroup', {
        SecurityGroupEgress: [
            {
                CidrIp: '0.0.0.0/0',
                Description: 'Allow all outbound traffic by default',
                IpProtocol: '-1',
            },
        ],
    });
});
test('Testing runner tag change ', () => {
    const mockApp = new core_1.App();
    const stack = new core_1.Stack(mockApp, 'testing-stack');
    new index_1.GitlabContainerRunner(stack, 'testing-have-type-tag', {
        gitlabtoken: 'GITLAB_TOKEN',
        tag1: 'aa',
        tag2: 'bb',
        tag3: 'cc',
    });
    expect(stack).toHaveResource('AWS::EC2::Instance');
    expect(stack).toHaveResource('AWS::EC2::SecurityGroup', {
        SecurityGroupEgress: [
            {
                CidrIp: '0.0.0.0/0',
                Description: 'Allow all outbound traffic by default',
                IpProtocol: '-1',
            },
        ],
    });
});
test('Testing Runner Instance Type Change ', () => {
    const mockApp = new core_1.App();
    const stack = new core_1.Stack(mockApp, 'testing-stack');
    new index_1.GitlabContainerRunner(stack, 'testing', {
        gitlabtoken: 'GITLAB_TOKEN',
        ec2type: 't2.micro',
    });
    expect(stack).toHaveResource('AWS::EC2::Instance', {
        InstanceType: 't2.micro',
    });
    expect(stack).toHaveResource('AWS::EC2::SecurityGroup', {
        SecurityGroupEgress: [
            {
                CidrIp: '0.0.0.0/0',
                Description: 'Allow all outbound traffic by default',
                IpProtocol: '-1',
            },
        ],
    });
});
test('Runner Can Add Ingress ', () => {
    const mockApp = new core_1.App();
    const stack = new core_1.Stack(mockApp, 'testing-stack');
    const runner = new index_1.GitlabContainerRunner(stack, 'testing', {
        gitlabtoken: 'GITLAB_TOKEN',
        ec2type: 't2.micro',
        tag1: 'aa',
        tag2: 'bb',
        tag3: 'cc',
    });
    runner.runnerEc2.connections.allowFrom(aws_ec2_1.Peer.ipv4('1.2.3.4/8'), aws_ec2_1.Port.tcp(80));
    expect(stack).toHaveResource('AWS::EC2::Instance', {
        InstanceType: 't2.micro',
    });
    expect(stack).toHaveResource('AWS::EC2::VPC', {
        CidrBlock: '10.0.0.0/16',
    });
    expect(stack).toHaveResource('AWS::EC2::SecurityGroup', {
        SecurityGroupIngress: [
            {
                CidrIp: '0.0.0.0/0',
                Description: 'from 0.0.0.0/0:22',
                FromPort: 22,
                IpProtocol: 'tcp',
                ToPort: 22,
            },
            {
                CidrIp: '1.2.3.4/8',
                Description: 'from 1.2.3.4/8:80',
                FromPort: 80,
                IpProtocol: 'tcp',
                ToPort: 80,
            },
        ],
    });
});
test('Runner Can Use Self VPC ', () => {
    const mockApp = new core_1.App();
    const stack = new core_1.Stack(mockApp, 'testing-stack');
    const newvpc = new aws_ec2_1.Vpc(stack, 'NEWVPC', {
        cidr: '10.1.0.0/16',
        maxAzs: 2,
        subnetConfiguration: [
            {
                cidrMask: 26,
                name: 'RunnerVPC',
                subnetType: aws_ec2_1.SubnetType.PUBLIC,
            },
        ],
        natGateways: 0,
    });
    new index_1.GitlabContainerRunner(stack, 'testing', {
        gitlabtoken: 'GITLAB_TOKEN',
        ec2type: 't2.micro',
        selfvpc: newvpc,
    });
    expect(stack).toHaveResource('AWS::EC2::Instance', {
        InstanceType: 't2.micro',
    });
    expect(stack).not.toHaveResource('AWS::S3::Bucket');
    expect(stack).toHaveResource('AWS::EC2::VPC', {
        CidrBlock: '10.1.0.0/16',
    });
});
test('Runner Can Use Self Role ', () => {
    const mockApp = new core_1.App();
    const stack = new core_1.Stack(mockApp, 'testing-stack');
    const role = new aws_iam_1.Role(stack, 'runner-role', {
        assumedBy: new aws_iam_1.ServicePrincipal('ec2.amazonaws.com'),
        description: 'For Gitlab EC2 Runner Test Role',
        roleName: 'TestRole',
    });
    new index_1.GitlabContainerRunner(stack, 'testing', {
        gitlabtoken: 'GITLAB_TOKEN',
        ec2type: 't2.micro',
        ec2iamrole: role,
    });
    expect(stack).toHaveResource('AWS::EC2::Instance', {
        InstanceType: 't2.micro',
    });
    expect(stack).toHaveResource('AWS::IAM::Role', {
        RoleName: 'TestRole',
    });
});
test('Can Use Coustom Gitlab Url', () => {
    const mockApp = new core_1.App();
    const stack = new core_1.Stack(mockApp, 'testing-stack');
    const newvpc = new aws_ec2_1.Vpc(stack, 'NEWVPC', {
        cidr: '10.1.0.0/16',
        maxAzs: 2,
        natGateways: 1,
    });
    new index_1.GitlabContainerRunner(stack, 'testing', {
        gitlabtoken: 'GITLAB_TOKEN',
        gitlaburl: 'https://gitlab.my.com/',
        selfvpc: newvpc,
        vpcSubnet: {
            subnetType: aws_ec2_1.SubnetType.PRIVATE,
        },
    });
    expect(stack).toHaveResource('AWS::EC2::Instance');
});
test('Can Use Coustom EBS Size', () => {
    const mockApp = new core_1.App();
    const stack = new core_1.Stack(mockApp, 'testing-stack');
    new index_1.GitlabContainerRunner(stack, 'testing', {
        gitlabtoken: 'GITLAB_TOKEN',
        ebsSize: 50,
    });
    expect(stack).toHaveResource('AWS::EC2::Instance', {
        BlockDeviceMappings: [
            {
                DeviceName: '/dev/xvda',
                Ebs: {
                    VolumeSize: 50,
                },
            },
        ],
    });
});
test('Can Use Spotfleet Runner', () => {
    const mockApp = new core_1.App();
    const stack = new core_1.Stack(mockApp, 'testing-spotfleet');
    const testspot = new index_1.GitlabContainerRunner(stack, 'testing', {
        gitlabtoken: 'GITLAB_TOKEN',
        spotFleet: true,
        instanceInterruptionBehavior: index_1.InstanceInterruptionBehavior.HIBERNATE,
        ebsSize: 100,
        blockDuration: index_1.BlockDuration.SIXTEEN_HOURS,
        vpcSubnet: {
            subnetType: aws_ec2_1.SubnetType.PUBLIC,
        },
    });
    testspot.expireAfter(core_1.Duration.hours(6));
    expect(stack).toHaveResource('AWS::EC2::SpotFleet');
});
test('Can Use Spotfleet Runner None ', () => {
    const mockApp = new core_1.App();
    const stack = new core_1.Stack(mockApp, 'testing-spotfleet');
    const newvpc = new aws_ec2_1.Vpc(stack, 'NEWVPC', {
        cidr: '10.1.0.0/16',
        maxAzs: 2,
        natGateways: 1,
    });
    const testspot = new index_1.GitlabContainerRunner(stack, 'testing', {
        gitlabtoken: 'GITLAB_TOKEN',
        spotFleet: true,
        selfvpc: newvpc,
        vpcSubnet: {
            subnetType: aws_ec2_1.SubnetType.PRIVATE,
        },
    });
    testspot.expireAfter(core_1.Duration.hours(6));
    expect(stack).toHaveResource('AWS::EC2::SpotFleet');
});
//# sourceMappingURL=data:application/json;base64,